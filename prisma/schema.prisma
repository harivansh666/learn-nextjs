// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id String @id @default(cuid())
email String @unique 
username String @unique
clerkID String @unique
name String?
bio String?
image String?
location String?
website String?
createdAt  DateTime  @default(now()) // like:- member since 2020
updatedAt  DateTime  @updatedAt

//Relations 
post Post[]// one-to-many
comments Comment[]// one-to-many
likes Like[]// one-to-many


followers Follows[] @relation("following")
following Follows[]@relation("followers")

notifications Notification[] @relation("userNotifications")//notifications: User ko kaun kaun si notifications mili (receiver)
   notificationsCreated Notification[] @relation("notificationCreator") //notificationsCreated: User ne kaun si notifications banayi (sender)

}

model Post{
  id String @id @default(cuid())
  autherId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  auther User @relation(fields: [autherId],references: [id], onDelete: Cascade) // cascade delete means delete all posts if auther id deleted
  comments Comment[]
  likes Like[]
  notification Notification[]
}

model Comment{
  id String @id @default(cuid())
  content String
  autherId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  auther User @relation(fields: [autherId], references: [id]) 
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    notifications Notification[]

  @@index([autherId,postId])// eh das reha aa ke give aa comment of this --> autherId and this --> postId 
}

model Like{

id String  @id @default(cuid())
userId String
postId String
createdAt DateTime @default(now())

// Relations
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

@@index([userId,postId])
@@unique([userId,postId])

}

model Follows{
 followerId String
followingId String
createdAt DateTime @default(now())

// Relations 
follower User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
following User  @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

 @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId, followingId]) // composite primary key prevents duplicate follows

}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}